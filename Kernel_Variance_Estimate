import pandas as pd
import numpy as np

class Kernel_Variance_Estimation:
    def __init__(self, s=1.0, memory=3):
        self.s = s
        self.memory = memory

    def point_naive_variance(self, days, P, day):
        D = P[days == day]
        if D.size == 0:
            return np.nan
        return np.var(D)
    
    def naive_variance(self, days, P):
        days = np.unique(days)
        output = {day: self.point_naive_variance(days, P, day) for day in days}
        return output

    def point_variance(self, days, P, day,s=1.0, memory=3, symmetric = True):
        if len(P) == 0:
            return np.nan  # Return NaN if the data is empty
        U = np.unique(days)
        V = np.zeros(len(U))
        for i in range(len(U)):
            V[i] = self.point_naive_variance(days,P,U[i])
        W = np.exp(-((U - day) ** 2) / (2.0 * (s ** 2)))
        return  np.average(V, weights=W) # Compute weighted variance
    
    def variance(self, days, P, s=1.0, memory=3,symmetric = True):
        m = int(np.max(days))
        print(m)
        return np.array([self.point_variance(days, P, day,s=s, memory=memory,symmetric=symmetric) for day in range(m + 1)])
